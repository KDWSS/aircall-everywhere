{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:////Users/mass/Documents/GitHub/aircall-everywhere/index.js","webpack:////Users/mass/Documents/GitHub/aircall-everywhere/src/javascripts/aircallPhone.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;AClFA;;AAEA;;;;;;;;;;;;;ACFA;AAAA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;;AAEA,iEAAiE,MAAM,QAAQ,IAAI;AACnF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gDAAgD,kBAAkB,oBAAoB,sBAAsB,aAAa;AACzH,KAAK;AACL;AACA,oCAAoC,oBAAoB;AACxD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+CAA+C,UAAU;AACzD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC,0BAA0B;;AAEnE;AACA;AACA;AACA,SAAS,8DAA8D;AACvE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,cAAc,cAAc;AAC5B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,kBAAkB,UAAU,gBAAgB;AACnD;AACA;AACA;AACA;;AAEA","file":"aircall-everywhere.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","import AircallPhone from './src/javascripts/aircallPhone.js';\n\nexport default AircallPhone;\n","class AircallPhone {\n  constructor(opts = {}) {\n    // internal vars\n    // window object of loaded aircall phone\n    this.phoneWindow = null;\n    this.integrationSettings = {};\n    this.eventsRegistered = {};\n\n    const URL_REGEX = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/gi;\n    this.phoneStarted = false;\n\n    // options passed\n    this.phoneUrl =\n      opts.phoneUrl !== undefined && URL_REGEX.test(opts.phoneUrl) === true\n        ? opts.phoneUrl\n        : 'https://phone.aircall.io';\n    this.domToLoadPhone = opts.domToLoadPhone;\n    this.integrationToLoad = opts.integrationToLoad;\n    this.afterPhoneLoaded = () => {\n      if (this.phoneStarted === false && typeof opts.afterPhoneLoaded === 'function') {\n        this.phoneStarted = true;\n        opts.afterPhoneLoaded();\n      }\n    };\n    // local window\n    this.w = opts.window || window;\n\n    // launch postmessage listener\n    this._messageListener();\n\n    // load phone in specified dom\n    if (!!this.domToLoadPhone) {\n      this._createPhoneIframe();\n    }\n  }\n\n  _createPhoneIframe() {\n    // we get the passed dom\n    try {\n      const el = document.querySelector(this.domToLoadPhone);\n      el.innerHTML = `<iframe allow=\"microphone; autoplay\" src=\"${this.getUrlToLoad()}\" style=\"height:666px; width:376px;\"></iframe>`;\n    } catch (e) {\n      // couldnt query the dom wanted\n      console.error(`[AircallSDK] ${this.domToLoadPhone} not be found. Error:`, e);\n    }\n  }\n\n  _messageListener() {\n    this.w.addEventListener(\n      'message',\n      event => {\n        console.log('[AircallSDK] received event', event);\n        // we test if our format object is present. if not, we stop\n        const matchPrefixRegex = /^apm_phone_/;\n        if (!event.data || !event.data.name || !matchPrefixRegex.test(event.data.name)) {\n          return false;\n        }\n\n        // initialisation message\n        if (event.data.name === 'apm_phone_loaded') {\n          this._handleInitMessage(event);\n          return;\n        }\n\n        // integration settings sent by phone\n        if (event.data.name === 'apm_phone_integration_settings' && !!event.data.value) {\n          this.integrationSettings = event.data.value;\n          // init callback after settings received\n          this.afterPhoneLoaded();\n          return;\n        }\n\n        // loop over events registered\n        for (const eventName in this.eventsRegistered) {\n          if (event.data.name === `apm_phone_${eventName}`) {\n            // event triggered => we execute callback\n            this.eventsRegistered[eventName](event.data.value);\n          }\n        }\n      },\n      false\n    );\n  }\n\n  _handleInitMessage(event) {\n    // we keep the source\n    this.phoneWindow = {\n      source: event.source,\n      origin: event.origin\n    };\n\n    // we answer init\n    this.phoneWindow.source.postMessage({ name: 'apm_app_isready' }, this.phoneWindow.origin);\n\n    // we ask for integration settings\n    if (!!this.integrationToLoad) {\n      this.phoneWindow.source.postMessage(\n        { name: 'apm_app_get_settings', value: this.integrationToLoad },\n        this.phoneWindow.origin\n      );\n    } else {\n      // init callback now if present\n      this.afterPhoneLoaded();\n    }\n  }\n\n  getUrlToLoad() {\n    return `${this.phoneUrl}?integration=generic`;\n  }\n\n  getSetting(settingName) {\n    return this.integrationSettings[settingName];\n  }\n\n  on(eventName, callback) {\n    if (!eventName || typeof callback !== 'function') {\n      throw new Error(\n        '[AircallEverywhere] Invalid parameters format. Expected non empty string and function'\n      );\n    }\n    this.eventsRegistered[eventName] = callback;\n  }\n\n  send(eventName, data) {\n    if (!eventName) {\n      throw new Error(\n        '[AircallEverywhere] Invalid parameter eventName. Expected an non empty string'\n      );\n    }\n    this.phoneWindow.source.postMessage(\n      { name: `apm_app_${eventName}`, value: data },\n      this.phoneWindow.origin\n    );\n  }\n}\n\nexport default AircallPhone;\n"],"sourceRoot":""}